#include "ros/ros.h"
#include "ros/time.h"
#include "GATE_ZigBee/ZigbeeFrame.h"
#include "zigbee_ros/zigbeeStorer.h"

#include <signal.h>

#include <sstream>
#include <vector>
#include <algorithm>
#include <time.h>



/*
 * Init function:
 *  - open serial port
 *  - init structures
 */
int init(void) {
   serialPort = serialPort0;

   /*
    * Try to open serial port
    */
   if ((sd = open(serialPort, O_RDWR | O_NOCTTY | O_NDELAY)) == -1)
   {
      fprintf(stderr, "Unable to open the serial port %s - \n", serialPort);
      exit(-1);
   }
   else
   {
      if (!sd)
      {
         sd = open(serialPort, O_RDWR | O_NOCTTY | O_NDELAY);
      }
      fcntl(sd, F_SETFL, 0);
   }

   tcgetattr(sd, &opciones);
   cfsetispeed(&opciones, B38400);
   cfsetospeed(&opciones, B38400);
   opciones.c_cflag |= (CLOCAL | CREAD);

   /*
    * No parity
    */
   opciones.c_cflag &= ~PARENB;
   opciones.c_cflag &= ~CSTOPB;
   opciones.c_cflag &= ~CSIZE;
   opciones.c_cflag |= CS8;

   /*
    * raw input:
    * making the application ready to receive
    */
   opciones.c_lflag &= ~(ICANON | ECHO | ECHOE | ISIG);

   /*
    * Ignore parity errors
    */
   opciones.c_iflag |= ~(INPCK | ISTRIP | PARMRK);
   opciones.c_iflag |= IGNPAR;
   opciones.c_iflag &= ~(IXON | IXOFF | IXANY | IGNCR | IGNBRK);
   opciones.c_iflag |= BRKINT;

   /*
    * raw output
    * making the applycation ready to transmit
    */
   opciones.c_oflag &= ~OPOST;

   /*
    * apply
    */
   tcsetattr(sd, TCSANOW, &opciones);

   return 0;
}
