/* Auto-generated by genmsg_cpp for file /home/mchehaid/ros_workspace/knxservice/srv/KnxSet.srv */
#ifndef KNXSERVICE_SERVICE_KNXSET_H
#define KNXSERVICE_SERVICE_KNXSET_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace knxservice
{
template <class ContainerAllocator>
struct KnxSetRequest_ {
  typedef KnxSetRequest_<ContainerAllocator> Type;

  KnxSetRequest_()
  : action()
  , target()
  , value(0)
  {
  }

  KnxSetRequest_(const ContainerAllocator& _alloc)
  : action(_alloc)
  , target(_alloc)
  , value(0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _action_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  action;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _target_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  target;

  typedef int64_t _value_type;
  int64_t value;


  typedef boost::shared_ptr< ::knxservice::KnxSetRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::knxservice::KnxSetRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct KnxSetRequest
typedef  ::knxservice::KnxSetRequest_<std::allocator<void> > KnxSetRequest;

typedef boost::shared_ptr< ::knxservice::KnxSetRequest> KnxSetRequestPtr;
typedef boost::shared_ptr< ::knxservice::KnxSetRequest const> KnxSetRequestConstPtr;


template <class ContainerAllocator>
struct KnxSetResponse_ {
  typedef KnxSetResponse_<ContainerAllocator> Type;

  KnxSetResponse_()
  : etat()
  , xml()
  {
  }

  KnxSetResponse_(const ContainerAllocator& _alloc)
  : etat(_alloc)
  , xml(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _etat_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  etat;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _xml_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  xml;


  typedef boost::shared_ptr< ::knxservice::KnxSetResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::knxservice::KnxSetResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct KnxSetResponse
typedef  ::knxservice::KnxSetResponse_<std::allocator<void> > KnxSetResponse;

typedef boost::shared_ptr< ::knxservice::KnxSetResponse> KnxSetResponsePtr;
typedef boost::shared_ptr< ::knxservice::KnxSetResponse const> KnxSetResponseConstPtr;

struct KnxSet
{

typedef KnxSetRequest Request;
typedef KnxSetResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct KnxSet
} // namespace knxservice

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::knxservice::KnxSetRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::knxservice::KnxSetRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::knxservice::KnxSetRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "edbd38a1b8ec4c3c90bf6850c8e3a49d";
  }

  static const char* value(const  ::knxservice::KnxSetRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xedbd38a1b8ec4c3cULL;
  static const uint64_t static_value2 = 0x90bf6850c8e3a49dULL;
};

template<class ContainerAllocator>
struct DataType< ::knxservice::KnxSetRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "knxservice/KnxSetRequest";
  }

  static const char* value(const  ::knxservice::KnxSetRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::knxservice::KnxSetRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string action\n\
string target\n\
int64 value\n\
\n\
";
  }

  static const char* value(const  ::knxservice::KnxSetRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::knxservice::KnxSetResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::knxservice::KnxSetResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::knxservice::KnxSetResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7d1163783d3ba488b8dad1d628f08d0f";
  }

  static const char* value(const  ::knxservice::KnxSetResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x7d1163783d3ba488ULL;
  static const uint64_t static_value2 = 0xb8dad1d628f08d0fULL;
};

template<class ContainerAllocator>
struct DataType< ::knxservice::KnxSetResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "knxservice/KnxSetResponse";
  }

  static const char* value(const  ::knxservice::KnxSetResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::knxservice::KnxSetResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string etat\n\
string xml\n\
\n\
\n\
";
  }

  static const char* value(const  ::knxservice::KnxSetResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::knxservice::KnxSetRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.action);
    stream.next(m.target);
    stream.next(m.value);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct KnxSetRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::knxservice::KnxSetResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.etat);
    stream.next(m.xml);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct KnxSetResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<knxservice::KnxSet> {
  static const char* value() 
  {
    return "a52063543f07e0ff1e50cfc319531f85";
  }

  static const char* value(const knxservice::KnxSet&) { return value(); } 
};

template<>
struct DataType<knxservice::KnxSet> {
  static const char* value() 
  {
    return "knxservice/KnxSet";
  }

  static const char* value(const knxservice::KnxSet&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<knxservice::KnxSetRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a52063543f07e0ff1e50cfc319531f85";
  }

  static const char* value(const knxservice::KnxSetRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<knxservice::KnxSetRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "knxservice/KnxSet";
  }

  static const char* value(const knxservice::KnxSetRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<knxservice::KnxSetResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a52063543f07e0ff1e50cfc319531f85";
  }

  static const char* value(const knxservice::KnxSetResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<knxservice::KnxSetResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "knxservice/KnxSet";
  }

  static const char* value(const knxservice::KnxSetResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // KNXSERVICE_SERVICE_KNXSET_H

