/* Auto-generated by genmsg_cpp for file /home/mchehaid/ros_workspace/PALGATE_msgs/msg/ZigbeeFrame.msg */
#ifndef PALGATE_MSGS_MESSAGE_ZIGBEEFRAME_H
#define PALGATE_MSGS_MESSAGE_ZIGBEEFRAME_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace PALGATE_msgs
{
template <class ContainerAllocator>
struct ZigbeeFrame_ {
  typedef ZigbeeFrame_<ContainerAllocator> Type;

  ZigbeeFrame_()
  : seq(0)
  , stamp()
  , capid()
  , caplocation()
  , sensvals()
  {
  }

  ZigbeeFrame_(const ContainerAllocator& _alloc)
  : seq(0)
  , stamp()
  , capid(_alloc)
  , caplocation(_alloc)
  , sensvals(_alloc)
  {
  }

  typedef uint32_t _seq_type;
  uint32_t seq;

  typedef ros::Time _stamp_type;
  ros::Time stamp;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _capid_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  capid;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _caplocation_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  caplocation;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _sensvals_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  sensvals;


  typedef boost::shared_ptr< ::PALGATE_msgs::ZigbeeFrame_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::PALGATE_msgs::ZigbeeFrame_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ZigbeeFrame
typedef  ::PALGATE_msgs::ZigbeeFrame_<std::allocator<void> > ZigbeeFrame;

typedef boost::shared_ptr< ::PALGATE_msgs::ZigbeeFrame> ZigbeeFramePtr;
typedef boost::shared_ptr< ::PALGATE_msgs::ZigbeeFrame const> ZigbeeFrameConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::PALGATE_msgs::ZigbeeFrame_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::PALGATE_msgs::ZigbeeFrame_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace PALGATE_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::PALGATE_msgs::ZigbeeFrame_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::PALGATE_msgs::ZigbeeFrame_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::PALGATE_msgs::ZigbeeFrame_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3a4eba2d81702f284d03cceeefea0aac";
  }

  static const char* value(const  ::PALGATE_msgs::ZigbeeFrame_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3a4eba2d81702f28ULL;
  static const uint64_t static_value2 = 0x4d03cceeefea0aacULL;
};

template<class ContainerAllocator>
struct DataType< ::PALGATE_msgs::ZigbeeFrame_<ContainerAllocator> > {
  static const char* value() 
  {
    return "PALGATE_msgs/ZigbeeFrame";
  }

  static const char* value(const  ::PALGATE_msgs::ZigbeeFrame_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::PALGATE_msgs::ZigbeeFrame_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint32 seq\n\
time stamp\n\
string capid\n\
string caplocation\n\
string sensvals\n\
\n\
";
  }

  static const char* value(const  ::PALGATE_msgs::ZigbeeFrame_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::PALGATE_msgs::ZigbeeFrame_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.seq);
    stream.next(m.stamp);
    stream.next(m.capid);
    stream.next(m.caplocation);
    stream.next(m.sensvals);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ZigbeeFrame_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::PALGATE_msgs::ZigbeeFrame_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::PALGATE_msgs::ZigbeeFrame_<ContainerAllocator> & v) 
  {
    s << indent << "seq: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.seq);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "capid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.capid);
    s << indent << "caplocation: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.caplocation);
    s << indent << "sensvals: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.sensvals);
  }
};


} // namespace message_operations
} // namespace ros

#endif // PALGATE_MSGS_MESSAGE_ZIGBEEFRAME_H

